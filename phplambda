#!/usr/bin/env php
<?php
declare(strict_types=1);

use DI\ContainerBuilder;
use GuzzleHttp\Psr7\Stream;
use PhpLambda\Util\CommandRunner;
use Symfony\Component\Console\Style\SymfonyStyle;
use Symfony\Component\Filesystem\Filesystem;

if (file_exists(__DIR__ . '/vendor/autoload.php')) {
    require_once __DIR__ . '/vendor/autoload.php';
} elseif (file_exists(__DIR__ . '/../autoload.php')) {
    require_once __DIR__ . '/../autoload.php';
} else {
    require_once __DIR__ . '/../../autoload.php';
}

$app = new Silly\Application;
$containerBuilder = new ContainerBuilder;
$app->useContainer($containerBuilder->build(), true, true);

$app->command('init', function (SymfonyStyle $io, CommandRunner $commandRunner, Filesystem $fs) {
    if (!file_exists('serverless.yml')) {
        $io->writeln('Creating serverless.yml');
        $fs->copy(__DIR__ . '/template/serverless.yml', 'serverless.yml');
    }
    if (!file_exists('.serverless_plugins/phplambda.js')) {
        $io->writeln('Installing the serverless plugin in .serverless_plugins/phplambda.js');
        $fs->copy(__DIR__ . '/template/serverless-plugin.js', '.serverless_plugins/phplambda.js');
    }
    $io->success([
        'Project initialized and ready to deploy using "serverless deploy"',
        'If you are using git, you will need to commit the following files:',
        '- serverless.yml',
        '- .serverless_plugins/phplambda.js',
        'You can add the following paths to your .gitignore:',
        '/.serverless/',
        '/bin/php',
        '/bin/usr',
    ]);
});

$app->command('deploy', function (
    SymfonyStyle $io,
    Filesystem $filesystem,
    CommandRunner $commandRunner
) {
    $io->writeln('Copying the project in the `.phplambda` directory');
    $filesystem->remove('.phplambda');
    $filesystem->mkdir('.phplambda');
    // TODO check if there are uncommitted changes in the directory, warn the user that these will not be deployed
    $commandRunner->run('cd .phplambda && git clone .. .');

    $io->writeln('Installing PHP in the `bin/` directory');
    $filesystem->mkdir('.phplambda/bin');
    if (!$filesystem->exists('.phplambda/bin/php')) {
        $commandRunner->run('curl -sSL https://lambci.s3.amazonaws.com/binaries/libtidy-0.99.tgz | tar -xz -C .phplambda/bin');
        $commandRunner->run('curl -sSL https://lambci.s3.amazonaws.com/binaries/libmcrypt-4.4.8.tgz | tar -xz -C .phplambda/bin');
        $commandRunner->run('curl -sSL https://lambci.s3.amazonaws.com/binaries/php-7.1.2.tgz | tar -xz -C .phplambda/bin');
        $filesystem->rename('.phplambda/bin/7.1.2', '.phplambda/bin/php');
        $filesystem->remove('.phplambda/bin/php/etc/conf.d/xdebug.ini'); // disable xdebug
    }

    $io->writeln('Installing `handler.js`');
    $filesystem->copy(__DIR__ . '/handler.js', '.phplambda/handler.js');

    $commandRunner->run('cd .phplambda && composer install --no-dev --classmap-authoritative');

    // TODO get rid of serverless_plugins
    // TODO check there is a lambda.php file
    // TODO .phplambda.yml
});

$app->command('cli [arguments]*', function (
    array $arguments,
    SymfonyStyle $io,
    CommandRunner $commandRunner
) {
    $serverlessInfo = $commandRunner->run('serverless info');
    foreach (explode(PHP_EOL, $serverlessInfo) as $line) {
        if (strpos($line, 'region: ') === 0) {
            $region = substr($line, strlen('region: '));
        }
        if (strpos($line, 'stack: ') === 0) {
            $functionName = substr($line, strlen('stack: ')) . '-main';
        }
    }
    if (empty($region) || empty($functionName)) {
        throw new Exception('Unable to parse the output of `serverless info`');
    }

    $lambda = new \Aws\Lambda\LambdaClient([
        'version' => 'latest',
        'region' => $region,
    ]);
    $result = $lambda->invoke([
        'FunctionName' => $functionName,
        'LogType' => 'Tail',
        'Payload' => json_encode([
            'cli' => implode(' ', $arguments),
        ]),
    ]);

    /** @var Stream $payload */
    $payload = $result->get('Payload');
    $payload = json_decode($payload->getContents(), true);
    if (isset($payload['output'])) {
        $io->writeln($payload['output']);
    } else {
        $io->error('The command did not return a valid response.');
        $io->writeln('<info>Logs:</info>');
        $io->write('<comment>' . base64_decode($result->get('LogResult')) . '</comment>');
        $io->writeln('<info>Lambda result payload:</info>');
        $io->writeln(json_encode($payload, JSON_PRETTY_PRINT));
        return 1;
    }

    return (int) ($payload['exitCode'] ?? 1);
});

$app->run();
