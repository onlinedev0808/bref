#!/usr/bin/env php
<?php
declare(strict_types=1);

use Aws\Lambda\Exception\LambdaException;
use Aws\Lambda\LambdaClient;
use Aws\S3\S3Client;
use Aws\Sdk;
use DI\ContainerBuilder;
use function DI\object;
use GuzzleHttp\Psr7\Stream;
use PhpLambda\CommandRunner;
use Psr\Container\ContainerInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\Yaml\Yaml;

const LOCAL_CONFIG_FILE = '.lambda.yml';

require_once __DIR__ . '/vendor/autoload.php';

$localConfig = [];
if (file_exists(LOCAL_CONFIG_FILE)) {
    $localConfig = Yaml::parse(file_get_contents(LOCAL_CONFIG_FILE));
}
validateLocalConfig($localConfig);

$app = new Silly\Application;
$containerBuilder = new ContainerBuilder;
$containerBuilder->addDefinitions([
    'functionName' => $localConfig['name'],
    's3.bucket' => $localConfig['s3']['bucket'],
    Sdk::class => object()
        ->constructor([
            'region' => 'eu-west-1',
            'version' => 'latest',
        ]),
    LambdaClient::class => function (Sdk $sdk) : LambdaClient {
        return $sdk->createLambda();
    },
    S3Client::class => function (Sdk $sdk) : S3Client {
        return $sdk->createS3();
    },
]);
$app->useContainer($containerBuilder->build(), true, true);

$app->command('list', function (OutputInterface $output, LambdaClient $lambda) {
    $functions = $lambda->listFunctions()->get('Functions');
    foreach ($functions as $function) {
        $functionName = $function['FunctionName'];
        $function = $lambda->getFunction([
            'FunctionName' => $functionName,
        ]);
        // Filter by tag
        if (! isset($function['Tags']['phplambda'])) continue;
        $description = $function['Configuration']['Description'];
        $output->writeln("<info>{$functionName}</info>: {$description}");
    }
});

$app->command('invoke [functionName]', function (
    $functionName,
    OutputInterface $output,
    LambdaClient $lambda,
    ContainerInterface $container
) {
    if (empty($functionName)) {
        $functionName = $container->get('functionName');
    }

    $output->writeln("<info>Invoking $functionName</info>");
    $result = $lambda->invoke([
        'FunctionName' => $functionName,
        'LogType' => 'Tail',
        'Payload' => json_encode([]),
    ]);
    $statusCode = $result->get('StatusCode');
    $resultOutput = base64_decode($result->get('LogResult'));
    $output->writeln("<info>Lambda result status: $statusCode</info>");
    if ($statusCode !== 200) {
        $output->writeln('<error>The lambda finished with an error status</error>');
    }
    $output->writeln('<info>Lambda logs:</info>');
    $output->writeln("<comment>$resultOutput</comment>");
    $output->writeln('<info>Lambda result payload:</info>');
    /** @var Stream $payload */
    $payload = $result->get('Payload');
    $payload = json_decode($payload->getContents());
    $output->writeln(json_encode($payload, JSON_PRETTY_PRINT));
});

$app->command('deploy [functionName]', function (
    $functionName,
    OutputInterface $output,
    Filesystem $filesystem,
    CommandRunner $commandRunner,
    S3Client $s3,
    LambdaClient $lambda,
    ContainerInterface $container
) {
    if (empty($functionName)) {
        $functionName = $container->get('functionName');
    }
    $s3Bucket = $container->get('s3.bucket');
    $directory = temporaryDirectoryName($filesystem);

    $output->writeln("<comment>Building the archive to deploy in <info>$directory</info></comment>");
    // Install the application
    $commandRunner->run("cp -r . $directory");
    $filesystem->mkdir($directory . '/bin');
    // Install PHP and necessary libraries
    // TODO store this in a temp directory to avoid re-downloading?
    $commandRunner->run("curl -sSL https://lambci.s3.amazonaws.com/binaries/libtidy-0.99.tgz | tar -xz -C $directory/bin");
    $commandRunner->run("curl -sSL https://lambci.s3.amazonaws.com/binaries/libmcrypt-4.4.8.tgz | tar -xz -C $directory/bin");
    $commandRunner->run("curl -sSL https://lambci.s3.amazonaws.com/binaries/php-7.1.2.tgz | tar -xz -C $directory/bin");
    $filesystem->rename("$directory/bin/7.1.2", "$directory/bin/php");
    $filesystem->remove("$directory/bin/php/etc/conf.d/xdebug.ini"); // disable xdebug
    // Install main.js
    $filesystem->copy(__DIR__ . '/app/main.js', "$directory/main.js");
    // Create the archive
    $commandRunner->runInDirectory($directory, 'zip --symlinks -r app.zip *');

    $output->writeln("<comment>Deploying the archive to the <info>'$functionName'</info> lambda</comment>");
    // Upload the archive to S3
    $s3FileName = "phplambda/$functionName.zip";
    $s3->upload($s3Bucket, $s3FileName, fopen("$directory/app.zip", 'r'));
    // Update the lambda code
    try {
        $lambda->getFunction([
            'FunctionName' => $functionName,
        ]);
        $lambdaExists = true;
    } catch (LambdaException $e) {
        $lambdaExists = false;
    }
    if ($lambdaExists) {
        $lambda->updateFunctionCode([
            'FunctionName' => $functionName,
            'S3Bucket' => $s3Bucket,
            'S3Key' => $s3FileName,
        ]);
    } else {
        $output->writeln("<comment>The <info>'$functionName'</info> lambda does not exist, creating...</comment>");
        $lambda->createFunction([
            'FunctionName' => $functionName,
            'Runtime' => 'nodejs6.10',
            // TODO: what to do with that?
            'Role' => 'arn:aws:iam::416566615250:role/lambda_basic_execution',
            'Handler' => 'main.handler',
            'Code' => [
                'S3Bucket' => $s3Bucket,
                'S3Key' => $s3FileName,
            ],
            'Description' => 'This lambda was created by phplambda.',
            'Tags' => [
                'phplambda' => 'phplambda',
            ],
        ]);
    }

    // Clear the temporary directory
    $filesystem->remove($directory);
});

$app->run();

function validateLocalConfig(array $localConfig)
{
    $errors = [];
    if (empty($localConfig['name'])) {
        $errors[] = 'You must set a function name in .lambda.yml';
    }
    if (empty($localConfig['s3']['bucket'])) {
        $errors[] = 'You must configure S3 in .lambda.yml';
    }
    if (!empty($errors)) {
        echo implode("\n", $errors);
        exit(1);
    }
}

function temporaryDirectoryName(Filesystem $filesystem) : string
{
    $temporaryFile = tempnam(sys_get_temp_dir(), 'phplambda_');
    // Remove the file and we'll assume that we can use that name in the rest of the application
    $filesystem->remove($temporaryFile);
    return $temporaryFile;
}
