#!/usr/bin/env php
<?php
declare(strict_types=1);

use Aws\CloudFormation\CloudFormationClient;
use Bref\Lambda\InvocationFailed;
use Bref\Lambda\SimpleLambdaClient;
use Symfony\Component\Console\Style\SymfonyStyle;
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\Process\Exception\ProcessSignaledException;
use Symfony\Component\Process\ExecutableFinder;
use Symfony\Component\Process\Process;

if (file_exists(__DIR__ . '/vendor/autoload.php')) {
    require_once __DIR__ . '/vendor/autoload.php';
} elseif (file_exists(__DIR__ . '/../autoload.php')) {
    /** @noinspection PhpIncludeInspection */
    require_once __DIR__ . '/../autoload.php';
} else {
    /** @noinspection PhpIncludeInspection */
    require_once __DIR__ . '/../../autoload.php';
}

$app = new Silly\Application('Deploy serverless PHP applications');

$app->command('init', function (SymfonyStyle $io) {
    $exeFinder = new ExecutableFinder();
    if (! $exeFinder->find('sam')) {
        $io->error(
            'The `sam` command is not installed.' . PHP_EOL .
            'Please follow the instructions at https://bref.sh/docs/installation.html'
        );

        return 1;
    }

    if (getenv('AWS_ACCESS_KEY_ID') === false || getenv('AWS_SECRET_ACCESS_KEY') === false) {
        // Credentials are not configured with environment variables, check aws cli
        $awsProcess1 = new Process(['aws', 'configure', 'get', 'aws_access_key_id']);
        $awsProcess2 = new Process(['aws', 'configure', 'get', 'aws_secret_access_key']);

        try {
            $accessKeyProcessResult = $awsProcess1->run();
            $secretProcessResult = $awsProcess2->run();
        } catch (ProcessSignaledException $exception) {
            $io->error([
                'Running `aws configure` failed',
                'Please try running `aws configure` yourself for more debug information'
            ]);

            return 1;
        }

        if ($accessKeyProcessResult !== 0 || $secretProcessResult !== 0) {
            $io->error([
                'AWS credentials not found.',
                'Please follow the instructions at https://bref.sh/docs/installation.html',
            ]);

            return 1;
        }
    }

    if (file_exists('template.yaml') || file_exists('index.php')) {
        $io->error('The directory already contains a `template.yaml` and/or `index.php` file.');

        return 1;
    }

    $choice = $io->choice(
        'What kind of lambda do you want to create? (you will be able to add more functions later by editing `template.yaml`)',
        [
            'PHP function',
            'HTTP application',
            'Console application',
        ],
        'PHP function'
    );
    $templateDirectory = [
        'PHP function' => 'default',
        'HTTP application' => 'http',
        'Console application' => 'console',
    ][$choice];

    $fs = new Filesystem;
    $rootPath = __DIR__ . "/template/$templateDirectory";
    $filesToGitAdd = [];
    foreach (scandir($rootPath, SCANDIR_SORT_NONE) as $file) {
        if (in_array($file, ['.', '..'])) {
            continue;
        }
        $io->writeln("Creating $file");
        $fs->copy("$rootPath/$file", $file);
        $filesToGitAdd[] = $file;
    }

    $regionChoice = $io->ask(
        'In which AWS region do you want to deploy your application? (`us-east-1` is highly recommended for first time users)',
        'us-east-1'
    );

    if ($regionChoice !== 'us-east-1') {
        file_put_contents('template.yaml', str_replace('us-east-1', $regionChoice, file_get_contents('template.yaml')));
    }

    /*
     * We check if this is a git repository to automatically add files to git.
     */
    if ((new Process(['git', 'rev-parse', '--is-inside-work-tree']))->run() === 0) {
        foreach ($filesToGitAdd as $file) {
            (new Process(['git', 'add', $file]))->run();
        }
        $io->success([
            'Project initialized and ready to test or deploy.',
            'The files created were automatically added to git.',
        ]);
    } else {
        $io->success('Project initialized and ready to test or deploy.');
    }

    return 0;
});

/**
 * Run a CLI command in the remote environment.
 */
$app->command('cli function [--region=] [arguments]*', function (string $function, ?string $region, array $arguments, SymfonyStyle $io) {
    $lambda = new SimpleLambdaClient(($region ?: getenv('AWS_DEFAULT_REGION')) ?: 'us-east-1');

    try {
        $result = $lambda->invoke($function, json_encode([
            'cli' => implode(' ', $arguments),
        ]));
    } catch (InvocationFailed $e) {
        $io->getErrorStyle()->writeln('<info>' . $e->getInvocationLogs() . '</info>');
        $io->error($e->getMessage());
        return 1;
    }

    $payload = $result->getPayload();
    if (isset($payload['output'])) {
        $io->writeln($payload['output']);
    } else {
        $io->error('The command did not return a valid response.');
        $io->writeln('<info>Logs:</info>');
        $io->write('<comment>' . $result->getLogs() . '</comment>');
        $io->writeln('<info>Lambda result payload:</info>');
        $io->writeln(json_encode($payload, JSON_PRETTY_PRINT));
        return 1;
    }

    return (int) ($payload['exitCode'] ?? 1);
});

$app->command('invoke function [--region=] [-e|--event=]', function (string $function, ?string $region, ?string $event, SymfonyStyle $io) {
    $lambda = new SimpleLambdaClient(($region ?: getenv('AWS_DEFAULT_REGION')) ?: 'us-east-1');

    try {
        $result = $lambda->invoke($function, $event);
    } catch (InvocationFailed $e) {
        $io->getErrorStyle()->writeln('<info>' . $e->getInvocationLogs() . '</info>');
        $io->error($e->getMessage());
        return 1;
    }

    $io->getErrorStyle()->writeln('<info>' . $result->getLogs() . '</info>');

    $io->writeln(json_encode($result->getPayload(), JSON_PRETTY_PRINT));

    return 0;
})->descriptions('Invoke the lambda on the serverless provider', [
    '--event' => 'Event data as JSON, e.g. `--event \'{"name":"matt"}\'`',
]);

$app->command('deployment stack-name [--region=]', function (string $stackName, ?string $region, SymfonyStyle $io) {
    $cloudFormation = new CloudFormationClient([
        'version' => 'latest',
        'region' => ($region ?: getenv('AWS_DEFAULT_REGION')) ?: 'us-east-1',
    ]);

    $result = $cloudFormation->describeStackEvents([
        'StackName' => $stackName,
    ]);
    $events = $result->get('StackEvents');

    // Last events last
    $events = array_reverse($events);
    // Keep only events from the last 24 hours
    $oneDayAgo = new DateTimeImmutable('-1 day');
    $events = array_filter($events, function (array $event) use ($oneDayAgo) {
        return $event['Timestamp'] >= $oneDayAgo;
    });

    if (empty($events)) {
        $io->writeln('<info>No events were found in the last 24 hours.</info>');
        return 0;
    }

    $errors = [];
    foreach ($events as $event) {
        /** @var DateTimeInterface $time */
        $time = $event['Timestamp'];

        $status = $event['ResourceStatus'];
        $error = false;
        if (strpos($status, 'FAILED') !== false) {
            $error = true;
            $errors[] = $event;
        }

        $io->write(sprintf(
            '<comment>%s</comment> %s %s',
            $time->format('M j G:H'),
            $error ? "<error>$status</error>" : $status,
            $event['ResourceType']
        ));

        if (isset($event['ResourceStatusReason'])) {
            $io->write(" <info>{$event['ResourceStatusReason']}</info>");
        }
        $io->writeln('');
    }
    $io->writeln('');

    if (empty($errors)) {
        $io->writeln('<info>No errors found.</info>');
    } else {
        $io->writeln('<error>Summary of the errors found:</error>');
        foreach ($errors as $event) {
            /** @var DateTimeInterface $time */
            $time = $event['Timestamp'];
            $io->writeln(sprintf(
                '<comment>%s</comment> <info>%s</info> %s',
                $time->format('M j G:H'),
                $event['ResourceType'],
                $event['ResourceStatusReason'] ?? ''
            ));
        }
    }

    return 0;
})->descriptions('Displays the latest deployment logs from CloudFormation. Only the logs from the last 24 hours are displayed. Use these logs to debug why a deployment failed.');

$app->run();
