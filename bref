#!/usr/bin/env php
<?php
declare(strict_types=1);

use GuzzleHttp\Psr7\Stream;
use Bref\Util\CommandRunner;
use Symfony\Component\Console\Style\SymfonyStyle;
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\Yaml\Yaml;

if (file_exists(__DIR__ . '/vendor/autoload.php')) {
    require_once __DIR__ . '/vendor/autoload.php';
} elseif (file_exists(__DIR__ . '/../autoload.php')) {
    require_once __DIR__ . '/../autoload.php';
} else {
    require_once __DIR__ . '/../../autoload.php';
}

$app = new Silly\Application('Deploy serverless PHP applications');

$app->command('init', function (SymfonyStyle $io) {
    $fs = new Filesystem;
    if (!file_exists('serverless.yml')) {
        $io->writeln('Creating serverless.yml');
        $fs->copy(__DIR__ . '/template/serverless.yml', 'serverless.yml');
    }
    if (!file_exists('bref.php')) {
        $io->writeln('Creating bref.php');
        $fs->copy(__DIR__ . '/template/bref.php', 'bref.php');
    }
    $io->success([
        'Project initialized and ready to deploy using "bref deploy"',
        'If you are using git, you will need to commit the following files:',
        '- bref.php',
        '- serverless.yml',
        'You can add `/.bref/` to your .gitignore:',
    ]);
});

$app->command('deploy', function (SymfonyStyle $io) {
    $fs = new Filesystem;
    $commandRunner = new CommandRunner;

    if (!$fs->exists('serverless.yml') || !$fs->exists('bref.php')) {
        throw new Exception('The files `bref.php` and `serverless.yml` are required to deploy, run `bref init` to create them');
    }

    $io->writeln('Cloning the project in the `.bref` directory');
    $fs->remove('.bref');
    $fs->mkdir('.bref');

    if (!$fs->exists('.git')) {
        $currentDirectory = getcwd();
        $io->error("The directory `$currentDirectory` is not a git repository");
        return 1;
    }
    // TODO check if there are uncommitted changes in the directory, warn the user that these will not be deployed
    // TODO replace with rsync
    $commandRunner->run('cd .bref && git clone .. .');

    $io->writeln('Installing PHP in the `.bref/bin/` directory');
    $fs->mkdir('.bref/.bref/bin');
    if (!$fs->exists('.bref/.bref/bin/php')) {
        $commandRunner->run('curl -sSL https://s3.amazonaws.com/bref-php/bin/php-7.2.2.tar.gz | tar -xz -C .bref/.bref/bin');
    }

    $io->writeln('Installing `handler.js`');
    $fs->copy(__DIR__ . '/template/handler.js', '.bref/handler.js');

    $commandRunner->run('cd .bref && composer install --no-dev --classmap-authoritative');

    // TODO edit serverless.yml to auto-add .bref

    // Run build hooks defined in .bref.yml
    if ($fs->exists('.bref/.bref.yml')) {
        $config = Yaml::parse(file_get_contents('.bref/.bref.yml'));
        $buildHooks = $config['hooks']['build'] ?? [];
        foreach ($buildHooks as $buildHook) {
            $io->writeln('Running ' . $buildHook);
            $commandRunner->run('cd .bref && ' . $buildHook);
        }
    }

    $commandRunner->run('cd .bref && serverless deploy');
});

$app->command('cli [arguments]*', function (array $arguments, SymfonyStyle $io) {
    $commandRunner = new CommandRunner;

    $serverlessInfo = $commandRunner->run('serverless info');
    foreach (explode(PHP_EOL, $serverlessInfo) as $line) {
        if (strpos($line, 'region: ') === 0) {
            $region = substr($line, strlen('region: '));
        }
        if (strpos($line, 'stack: ') === 0) {
            $functionName = substr($line, strlen('stack: ')) . '-main';
        }
    }
    if (empty($region) || empty($functionName)) {
        throw new Exception('Unable to parse the output of `serverless info`');
    }

    $lambda = new \Aws\Lambda\LambdaClient([
        'version' => 'latest',
        'region' => $region,
    ]);
    $result = $lambda->invoke([
        'FunctionName' => $functionName,
        'LogType' => 'Tail',
        'Payload' => json_encode([
            'cli' => implode(' ', $arguments),
        ]),
    ]);

    /** @var Stream $payload */
    $payload = $result->get('Payload');
    $payload = json_decode($payload->getContents(), true);
    if (isset($payload['output'])) {
        $io->writeln($payload['output']);
    } else {
        $io->error('The command did not return a valid response.');
        $io->writeln('<info>Logs:</info>');
        $io->write('<comment>' . base64_decode($result->get('LogResult')) . '</comment>');
        $io->writeln('<info>Lambda result payload:</info>');
        $io->writeln(json_encode($payload, JSON_PRETTY_PRINT));
        return 1;
    }

    return (int) ($payload['exitCode'] ?? 1);
});

$app->command('info', function (SymfonyStyle $io) {
    $commandRunner = new CommandRunner;
    $io->write($commandRunner->run('serverless info'));
});

$app->run();
