#!/usr/bin/env php
<?php
declare(strict_types=1);

use Bref\Console\Deployer;
use GuzzleHttp\Psr7\Stream;
use Symfony\Component\Console\Style\SymfonyStyle;
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\Process\ExecutableFinder;
use Symfony\Component\Process\Process;

if (file_exists(__DIR__ . '/vendor/autoload.php')) {
    require_once __DIR__ . '/vendor/autoload.php';
} elseif (file_exists(__DIR__ . '/../autoload.php')) {
    require_once __DIR__ . '/../autoload.php';
} else {
    require_once __DIR__ . '/../../autoload.php';
}

$app = new Silly\Application('Deploy serverless PHP applications');

$app->command('init', function (SymfonyStyle $io) {
    $exeFinder = new ExecutableFinder();
    if (! $exeFinder->find('aws')) {
        $io->error(
            'The `aws` command is not installed.' . PHP_EOL .
            'Please follow the instructions on https://github.com/mnapoli/bref#setup'
        );

        return 1;
    }
    if (! $exeFinder->find('sam')) {
        $io->error(
            'The `sam` command is not installed.' . PHP_EOL .
            'Please follow the instructions on https://github.com/mnapoli/bref#setup'
        );

        return 1;
    }

    if (getenv('AWS_ACCESS_KEY_ID') === false || getenv('AWS_SECRET_ACCESS_KEY') === false) {
        // Credentials are not configured with environment variables, check aws cli
        $awsProcess1 = new Process(['aws', 'configure', 'get', 'aws_access_key_id']);
        $awsProcess2 = new Process(['aws', 'configure', 'get', 'aws_secret_access_key']);
        if (($awsProcess1->run() !== 0) || ($awsProcess2->run() !== 0)) {
            $io->error([
                'AWS credentials not found.',
                'Please follow the instructions on https://github.com/mnapoli/bref#setup',
            ]);

            return 1;
        }
    }

    if (file_exists('template.yaml') || file_exists('index.php')) {
        $io->error('The directory already contains a `template.yaml` and/or `index.php` file.');

        return 1;
    }

    $choice = $io->choice(
        'What kind of lambda do you want to create? (you will be able to add more functions later by editing `template.yaml`)',
        [
            'classic lambda',
            'HTTP application',
        ]
    );
    $templateDirectory = [
        'classic lambda' => 'default',
        'HTTP application' => 'http',
    ][$choice];

    $fs = new Filesystem;
    $io->writeln('Creating template.yaml');
    $fs->copy(__DIR__ . "/template/$templateDirectory/template.yaml", 'template.yaml');
    $io->writeln('Creating index.php');
    $fs->copy(__DIR__ . "/template/$templateDirectory/index.php", 'index.php');

    /*
     * We check if this is a git repository to automatically run some commands:
     * - git add bref.php serverless.yml
     * - add /.bref/ to .gitignore
     */
    if ((new Process(['git', 'rev-parse', '--is-inside-work-tree']))->run() === 0) {
        (new Process(['git', 'add', 'index.php', 'template.yaml']))->run();

        /*
         * Check that .bref is not already gitignored
         * `git check-ignore` exits with status 1 when "None of the provided paths are ignored."
         */
        if ((new Process(['git', 'check-ignore', '-q', '.bref']))->run() === 1) {
            $fs->appendToFile('.gitignore', '/.bref/' . PHP_EOL);
        }

        $io->success([
            'Project initialized and ready to deploy using `bref deploy`.',
            'As you are using git, we already did the following things automatically:',
            '- `git add index.php template.yaml`',
            '- `/.bref/` has been added to your .gitignore',
        ]);
    } else {
        $io->success([
            'Project initialized and ready to deploy using `bref deploy`.',
            'If you are using git, you will need to commit the following files:',
            '- index.php',
            '- template.yaml',
            'You can add `/.bref/` to your .gitignore.',
        ]);
    }
});

$app->command('local', function (SymfonyStyle $io) {
    $io->writeln([
        'Use <info>sam local</info> commands to test your lambda locally.',
        '',
        'For example for classic lambdas:',
        '<info>sam local invoke {function-name} --no-event</info>',
        'or',
        '<info>echo \'{"foo": "bar"}\' | sam local invoke {function-name}</info>',
        '',
        'For HTTP lambdas:',
        '<info>sam local start-api</info>',
    ]);
});

$app->command(
    'deploy [--dry-run] [--stage=]',
    function (SymfonyStyle $io, bool $dryRun, ?string $stage) {
        (new Deployer)->deploy($io, $dryRun, $stage);
    })
    ->descriptions('Deploy serverless application', [
        '--dry-run' => 'Build the serverless package without deploying it',
        '--stage' => 'Deployment stage',
    ]);

/**
 * Run a CLI command in the remote environment.
 */
$app->command('cli [--stage=] [arguments]*', function (?string $stage, array $arguments, SymfonyStyle $io) {
    $stageOption = $stage ? ' --stage ' . escapeshellarg($stage) : '';
    $serverlessInfo = (new Process('serverless info' . $stageOption))->mustRun()->getOutput();
    foreach (explode(PHP_EOL, $serverlessInfo) as $line) {
        if (strpos($line, 'region: ') === 0) {
            $region = substr($line, strlen('region: '));
        }
        if (strpos($line, 'stack: ') === 0) {
            $functionName = substr($line, strlen('stack: ')) . '-main';
        }
    }
    if (empty($region) || empty($functionName)) {
        throw new Exception('Unable to parse the output of `serverless info`');
    }

    // We cannot use the `serverless` CLI command here because it
    // mangles the lambda response (JSON data) with logs on stdout.
    // Using the AWS SDK allows to collect those data separately and properly.
    $lambda = new \Aws\Lambda\LambdaClient([
        'version' => 'latest',
        'region' => $region,
    ]);
    $result = $lambda->invoke([
        'FunctionName' => $functionName,
        'LogType' => 'Tail',
        'Payload' => json_encode([
            'cli' => implode(' ', $arguments),
        ]),
    ]);

    /** @var Stream $payload */
    $payload = $result->get('Payload');
    $payload = json_decode($payload->getContents(), true);
    if (isset($payload['output'])) {
        $io->writeln($payload['output']);
    } else {
        $io->error('The command did not return a valid response.');
        $io->writeln('<info>Logs:</info>');
        $io->write('<comment>' . base64_decode($result->get('LogResult')) . '</comment>');
        $io->writeln('<info>Lambda result payload:</info>');
        $io->writeln(json_encode($payload, JSON_PRETTY_PRINT));
        return 1;
    }

    return (int) ($payload['exitCode'] ?? 1);
});

$app->command('info [--stage=]', function () {
    throw new Exception('This feature is not yet available');
});

$app->command('remove [--stage=]', function () {
    throw new Exception('This feature is not yet available');
});

$app->command('logs [--stage=] [-t|--tail]', function () {
    throw new Exception('This feature is not yet available, use `sam logs` in the meantime');
});

$app->command('invoke [--stage=] [-e|--event=]', function () {
    throw new Exception('This feature is not yet available, use `aws lambda invoke --function-name my-function --invocation-type RequestResponse --region us-east-2 --log-type Tail` in the meantime');
})->descriptions('Invoke the lambda on the serverless provider', [
    '--event' => 'Event data as JSON, e.g. `--event \'{"name":"matt"}\'`',
]);

$app->run();
